<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans classpath:org/springframework/beans/factory/xml/spring-beans-3.0.xsd
				http://www.springframework.org/schema/context classpath:org/springframework/context/config/spring-context-3.0.xsd
				http://www.springframework.org/schema/aop classpath:org/springframework/aop/config/spring-aop-3.0.xsd
				http://www.springframework.org/schema/tx classpath:org/springframework/transaction/config/spring-tx-3.0.xsd
				http://www.springframework.org/schema/cache 
           		http://www.springframework.org/schema/cache/spring-cache-3.1.xsd">
	<!-- 引入jdbc配置文件 -->
	 <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:config/config.properties" />
	</bean> 
	<context:property-placeholder location="classpath:config/config.properties" ignore-resource-not-found="true" ignore-unresolvable="true" />

	<!-- 配置数据源 -->
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName"> <value>${jdbc_driverClassName}</value> 
		</property> <property name="url"> <value>${jdbc_url}</value> </property> 
		<property name="username"> <value>${jdbc_username}</value> </property> <property 
		name="password"> <value>${jdbc_password}</value> </property> </bean> -->

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- MySQL数据库配置 -->
		<property name="url" value="${url}"/> 
		<property name="username" value="${username}" /> 
		<property name="password" value="${password}" /> 

		<!-- SQL Server数据库配置 -->
		<!-- <property name="url" value="jdbc:sqlserver://localhost:1433;DatabaseName=jeefw"/>
			 <property name="username" value="jeefw" />
			 <property name="password" value="jeefw" /> 
		-->
		<!-- Oracle数据库配置 -->
		<!-- 	<property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:orcl" />
				<property name="username" value="creditsys" />
				<property name="password" value="creditsys" /> 
		-->
		<!-- 超过时间限制是否回收 --> 
		<!-- 配置初始化大小、最小、最大 -->  
	    <property name="initialSize" value="${initialSize}" />  
	    <property name="minIdle" value="${minIdle}" />   
	    <property name="maxActive" value="${maxActive}" />  
	   
	    <!-- 配置获取连接等待超时的时间 -->  
	    <property name="maxWait" value="${maxWait}" />  
	   
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
	    <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />  
	   
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
	    <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />  
	    
	    <property name="validationQuery" value="SELECT 'x'" />  
	    <property name="testWhileIdle" value="true" />  
	    <property name="testOnBorrow" value="false" />  
	    <property name="testOnReturn" value="false" />  
	   
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->  
	    <property name="poolPreparedStatements" value="true" />  
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />  
	   
	    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->  
	    <property name="filters" value="stat" />   
		</bean>
	
		<!-- 自动扫描了所有的XxxxMapper.xml对应的mapper接口文件，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<property name="basePackage" value="com.creidtsys.apps.*.dao" />
		</bean>

		<!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置 -->
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dataSource" />
			<property name="mapperLocations" value="classpath:mapper/*.xml" />
			<property name="configLocation" value="classpath:config/mybatis-config.xml" />
			<property name="plugins">
				<array>
					<bean class="com.github.pagehelper.PageInterceptor">
						<!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
						<property name="properties">
							<value>
								helperDialect=mysql
								reasonable=true
								supportMethodsArguments=true
								params=count=countSql
								autoRuntimeDialect=true
							</value>
						</property>
					</bean>
				</array>
			</property>
		</bean>
	
		<!-- 自动扫描注解的bean -->
		<context:component-scan base-package="com.creidtsys.apps.*.service.impl" />
		<bean id="transactionManager"
			class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource" />
		</bean>
	
		<tx:advice id="advice" transaction-manager="transactionManager">
			<!-- 配置事务传播性，隔离级别以及超时回滚等问题 -->
			<tx:attributes>
				<tx:method name="save*" propagation="REQUIRED" />
				<tx:method name="del*" propagation="REQUIRED" />
				<tx:method name="update*" propagation="REQUIRED" />
				<tx:method name="add*" propagation="REQUIRED" />
			    <tx:method name="*" rollback-for="Exception" />
			</tx:attributes>
		</tx:advice>
	
		<aop:config>
			<!-- 配置事务切点 -->
			<aop:pointcut id="services"
				expression="execution(* com.creidtsys.apps.*.service.*.*(..))" />
			<aop:advisor pointcut-ref="services" advice-ref="advice" />
		</aop:config>
		<aop:aspectj-autoproxy proxy-target-class="true" />
	
		<!-- 看了spring源码，该 org.springframework.jdbc.core.JdbcTemplate类的继承类有dataSource属性，所以可以属性注入 -->
		<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
			<property name="dataSource">
				<ref bean="dataSource" />
			</property>
		</bean>
				<!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
	    <cache:annotation-driven cache-manager="cacheManager"/>
		
	   <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
			<property name="configLocation" value="classpath:/config/ehcache-setting.xml" />
			<property name="shared" value="true" />
		</bean>
	
		<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
			<property name="cacheManager" ref="ehCacheManager" />
		</bean>
</beans>
